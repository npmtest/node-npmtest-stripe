{"/home/travis/build/npmtest/node-npmtest-stripe/test.js":"/* istanbul instrument in package npmtest_stripe */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-stripe/lib.npmtest_stripe.js":"/* istanbul instrument in package npmtest_stripe */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_stripe = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_stripe = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-stripe/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-stripe && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_stripe */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_stripe\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_stripe.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_stripe.rollup.js'] =\n            local.assetsDict['/assets.npmtest_stripe.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_stripe.__dirname +\n                    '/lib.npmtest_stripe.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/stripe.js":"'use strict';\n\nStripe.DEFAULT_HOST = 'api.stripe.com';\nStripe.DEFAULT_PORT = '443';\nStripe.DEFAULT_BASE_PATH = '/v1/';\nStripe.DEFAULT_API_VERSION = null;\n\n// Use node's default timeout:\nStripe.DEFAULT_TIMEOUT = require('http').createServer().timeout;\n\nStripe.PACKAGE_VERSION = require('../package.json').version;\n\nStripe.USER_AGENT = {\n  bindings_version: Stripe.PACKAGE_VERSION,\n  lang: 'node',\n  lang_version: process.version,\n  platform: process.platform,\n  publisher: 'stripe',\n  uname: null,\n};\n\nStripe.USER_AGENT_SERIALIZED = null;\n\nvar exec = require('child_process').exec;\n\nvar resources = {\n  // Support Accounts for consistency, Account for backwards compat\n  Account: require('./resources/Accounts'),\n  Accounts: require('./resources/Accounts'),\n  ApplePayDomains: require('./resources/ApplePayDomains'),\n  Balance: require('./resources/Balance'),\n  Charges: require('./resources/Charges'),\n  CountrySpecs: require('./resources/CountrySpecs'),\n  Coupons: require('./resources/Coupons'),\n  Customers: require('./resources/Customers'),\n  Disputes: require('./resources/Disputes'),\n  Events: require('./resources/Events'),\n  Invoices: require('./resources/Invoices'),\n  InvoiceItems: require('./resources/InvoiceItems'),\n  Payouts: require('./resources/Payouts'),\n  Plans: require('./resources/Plans'),\n  RecipientCards: require('./resources/RecipientCards'),\n  Recipients: require('./resources/Recipients'),\n  Refunds: require('./resources/Refunds'),\n  Tokens: require('./resources/Tokens'),\n  Transfers: require('./resources/Transfers'),\n  ApplicationFees: require('./resources/ApplicationFees'),\n  FileUploads: require('./resources/FileUploads'),\n  BitcoinReceivers: require('./resources/BitcoinReceivers'),\n  Products: require('./resources/Products'),\n  Skus: require('./resources/SKUs'),\n  Orders: require('./resources/Orders'),\n  OrderReturns: require('./resources/OrderReturns'),\n  Subscriptions: require('./resources/Subscriptions'),\n  SubscriptionItems: require('./resources/SubscriptionItems'),\n  ThreeDSecure: require('./resources/ThreeDSecure'),\n  Sources: require('./resources/Sources'),\n\n  // The following rely on pre-filled IDs:\n  CustomerCards: require('./resources/CustomerCards'),\n  CustomerSubscriptions: require('./resources/CustomerSubscriptions'),\n  ChargeRefunds: require('./resources/ChargeRefunds'),\n  ApplicationFeeRefunds: require('./resources/ApplicationFeeRefunds'),\n  TransferReversals: require('./resources/TransferReversals'),\n\n};\n\nStripe.StripeResource = require('./StripeResource');\nStripe.resources = resources;\n\nfunction Stripe(key, version) {\n  if (!(this instanceof Stripe)) {\n    return new Stripe(key, version);\n  }\n\n  this._api = {\n    auth: null,\n    host: Stripe.DEFAULT_HOST,\n    port: Stripe.DEFAULT_PORT,\n    basePath: Stripe.DEFAULT_BASE_PATH,\n    version: Stripe.DEFAULT_API_VERSION,\n    timeout: Stripe.DEFAULT_TIMEOUT,\n    agent: null,\n    dev: false,\n  };\n\n  this._prepResources();\n  this.setApiKey(key);\n  this.setApiVersion(version);\n}\n\nStripe.prototype = {\n\n  setHost: function(host, port, protocol) {\n    this._setApiField('host', host);\n    if (port) {\n      this.setPort(port);\n    }\n    if (protocol) {\n      this.setProtocol(protocol);\n    }\n  },\n\n  setProtocol: function(protocol) {\n    this._setApiField('protocol', protocol.toLowerCase());\n  },\n\n  setPort: function(port) {\n    this._setApiField('port', port);\n  },\n\n  setApiVersion: function(version) {\n    if (version) {\n      this._setApiField('version', version);\n    }\n  },\n\n  setApiKey: function(key) {\n    if (key) {\n      this._setApiField(\n        'auth',\n        'Basic ' + new Buffer(key + ':').toString('base64')\n      );\n    }\n  },\n\n  setTimeout: function(timeout) {\n    this._setApiField(\n      'timeout',\n      timeout == null ? Stripe.DEFAULT_TIMEOUT : timeout\n    );\n  },\n\n  setHttpAgent: function(agent) {\n    this._setApiField('agent', agent);\n  },\n\n  _setApiField: function(key, value) {\n    this._api[key] = value;\n  },\n\n  getApiField: function(key) {\n    return this._api[key];\n  },\n\n  getConstant: function(c) {\n    return Stripe[c];\n  },\n\n  // Gets a JSON version of a User-Agent and uses a cached version for a slight\n  // speed advantage.\n  getClientUserAgent: function(cb) {\n    if (Stripe.USER_AGENT_SERIALIZED) {\n      return cb(Stripe.USER_AGENT_SERIALIZED);\n    }\n    this.getClientUserAgentSeeded(Stripe.USER_AGENT, function(cua) {\n      Stripe.USER_AGENT_SERIALIZED = cua;\n      cb(Stripe.USER_AGENT_SERIALIZED);\n    })\n  },\n\n  // Gets a JSON version of a User-Agent by encoding a seeded object and\n  // fetching a uname from the system.\n  getClientUserAgentSeeded: function(seed, cb) {\n    exec('uname -a', function(err, uname) {\n      var userAgent = {};\n      for (var field in seed) {\n        userAgent[field] = encodeURIComponent(seed[field]);\n      }\n\n      // URI-encode in case there are unusual characters in the system's uname.\n      userAgent.uname = encodeURIComponent(uname) || 'UNKNOWN';\n\n      cb(JSON.stringify(userAgent));\n    });\n  },\n\n  _prepResources: function() {\n    for (var name in resources) {\n      this[\n        name[0].toLowerCase() + name.substring(1)\n      ] = new resources[name](this);\n    }\n  },\n\n};\n\nmodule.exports = Stripe;\n// expose constructor as a named property to enable mocking with Sinon.JS\nmodule.exports.Stripe = Stripe;\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Accounts.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\nvar utils = require('../utils');\n\nmodule.exports = StripeResource.extend({\n  // Since path can either be `account` or `accounts`, support both through stripeMethod path\n\n  create: stripeMethod({\n    method: 'POST',\n    path: 'accounts',\n  }),\n\n  list: stripeMethod({\n    method: 'GET',\n    path: 'accounts',\n  }),\n\n  update: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{id}',\n    urlParams: ['id'],\n  }),\n\n  // Avoid 'delete' keyword in JS\n  del: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{id}',\n    urlParams: ['id'],\n  }),\n\n  reject: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{id}/reject',\n    urlParams: ['id'],\n  }),\n\n  retrieve: function(id) {\n    // No longer allow an api key to be passed as the first string to this function due to ambiguity between\n    // old account ids and api keys. To request the account for an api key, send null as the id\n    if (typeof id === 'string') {\n      return stripeMethod({\n        method: 'GET',\n        path: 'accounts/{id}',\n        urlParams: ['id'],\n      }).apply(this, arguments);\n    } else {\n      if (id === null || id === undefined) {\n        // Remove id as stripeMethod would complain of unexpected argument\n        [].shift.apply(arguments);\n      }\n      return stripeMethod({\n        method: 'GET',\n        path: 'account',\n      }).apply(this, arguments);\n    }\n  },\n\n  /**\n   * Accounts: External account methods\n   */\n\n  createExternalAccount: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{accountId}/external_accounts',\n    urlParams: ['accountId'],\n  }),\n\n  listExternalAccounts: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{accountId}/external_accounts',\n    urlParams: ['accountId'],\n  }),\n\n  retrieveExternalAccount: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{accountId}/external_accounts/{externalAccountId}',\n    urlParams: ['accountId', 'externalAccountId'],\n  }),\n\n  updateExternalAccount: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{accountId}/external_accounts/{externalAccountId}',\n    urlParams: ['accountId', 'externalAccountId'],\n  }),\n\n  deleteExternalAccount: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{accountId}/external_accounts/{externalAccountId}',\n    urlParams: ['accountId', 'externalAccountId'],\n  }),\n\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/StripeResource.js":"'use strict';\n\nvar http = require('http');\nvar https = require('https');\nvar objectAssign = require('object-assign');\nvar path = require('path');\nvar Promise = require('bluebird');\n\nvar utils = require('./utils');\nvar Error = require('./Error');\n\nvar hasOwn = {}.hasOwnProperty;\n\n// Provide extension mechanism for Stripe Resource Sub-Classes\nStripeResource.extend = utils.protoExtend;\n\n// Expose method-creator & prepared (basic) methods\nStripeResource.method = require('./StripeMethod');\nStripeResource.BASIC_METHODS = require('./StripeMethod.basic');\n\n/**\n * Encapsulates request logic for a Stripe Resource\n */\nfunction StripeResource(stripe, urlData) {\n  this._stripe = stripe;\n  this._urlData = urlData || {};\n\n  this.basePath = utils.makeURLInterpolator(stripe.getApiField('basePath'));\n  this.resourcePath = this.path;\n  this.path = utils.makeURLInterpolator(this.path);\n\n  if (this.includeBasic) {\n    this.includeBasic.forEach(function(methodName) {\n      this[methodName] = StripeResource.BASIC_METHODS[methodName];\n    }, this);\n  }\n\n  this.initialize.apply(this, arguments);\n}\n\nStripeResource.prototype = {\n\n  path: '',\n\n  initialize: function() {},\n\n  // Function to override the default data processor. This allows full control\n  // over how a StripeResource's request data will get converted into an HTTP\n  // body. This is useful for non-standard HTTP requests. The function should\n  // take method name, data, and headers as arguments.\n  requestDataProcessor: null,\n\n  // String that overrides the base API endpoint. If `overrideHost` is not null\n  // then all requests for a particular resource will be sent to a base API\n  // endpoint as defined by `overrideHost`.\n  overrideHost: null,\n\n  createFullPath: function(commandPath, urlData) {\n    return path.join(\n      this.basePath(urlData),\n      this.path(urlData),\n      typeof commandPath == 'function' ?\n        commandPath(urlData) : commandPath\n    ).replace(/\\\\/g, '/'); // ugly workaround for Windows\n  },\n\n  // Creates a relative resource path with symbols left in (unlike\n  // createFullPath which takes some data to replace them with). For example it\n  // might produce: /invoices/{id}\n  createResourcePathWithSymbols: function(pathWithSymbols) {\n    return '/' + path.join(\n      this.resourcePath,\n      pathWithSymbols\n    ).replace(/\\\\/g, '/'); // ugly workaround for Windows\n  },\n\n  createUrlData: function() {\n    var urlData = {};\n    // Merge in baseData\n    for (var i in this._urlData) {\n      if (hasOwn.call(this._urlData, i)) {\n        urlData[i] = this._urlData[i];\n      }\n    }\n    return urlData;\n  },\n\n  wrapTimeout: function(promise, callback) {\n    if (callback) {\n      // Ensure callback is called outside of promise stack.\n      return promise.then(function(res) {\n        setTimeout(function() { callback(null, res) }, 0);\n      }, function(err) {\n        setTimeout(function() { callback(err, null); }, 0);\n      });\n    }\n\n    return promise;\n  },\n\n  _timeoutHandler: function(timeout, req, callback) {\n    var self = this;\n    return function() {\n      var timeoutErr = new Error('ETIMEDOUT');\n      timeoutErr.code = 'ETIMEDOUT';\n\n      req._isAborted = true;\n      req.abort();\n\n      callback.call(\n        self,\n        new Error.StripeConnectionError({\n          message: 'Request aborted due to timeout being reached (' + timeout + 'ms)',\n          detail: timeoutErr,\n        }),\n        null\n      );\n    }\n  },\n\n  _responseHandler: function(req, callback) {\n    var self = this;\n    return function(res) {\n      var response = '';\n\n      res.setEncoding('utf8');\n      res.on('data', function(chunk) {\n        response += chunk;\n      });\n      res.on('end', function() {\n        var headers = res.headers || {};\n\n        try {\n          response = JSON.parse(response);\n\n          // For convenience, make Request-Id easily accessible on\n          // lastResponse.\n          res.requestId = headers['request-id'];\n\n          if (response.error) {\n            var err;\n\n            // These are now available on the top-level resource's\n            // lastResponse, but we keep them here too for backwards\n            // compatibility.\n            response.error.statusCode = res.statusCode;\n            response.error.requestId = res.requestId;\n\n            if (res.statusCode === 401) {\n              err = new Error.StripeAuthenticationError(response.error);\n            } else if (res.statusCode === 403) {\n              err = new Error.StripePermissionError(response.error);\n            } else if (res.statusCode === 429) {\n              err = new Error.StripeRateLimitError(response.error);\n            } else {\n              err = Error.StripeError.generate(response.error);\n            }\n            return callback.call(self, err, null);\n          }\n        } catch (e) {\n          return callback.call(\n            self,\n            new Error.StripeAPIError({\n              message: 'Invalid JSON received from the Stripe API',\n              response: response,\n              exception: e,\n              requestId: headers['request-id'],\n            }),\n            null\n          );\n        }\n        // Expose res object\n        Object.defineProperty(response, 'lastResponse', {\n          enumerable: false,\n          writable: false,\n          value: res,\n        });\n        callback.call(self, null, response);\n      });\n    };\n  },\n\n  _errorHandler: function(req, callback) {\n    var self = this;\n    return function(error) {\n      if (req._isAborted) {\n        // already handled\n        return;\n      }\n      callback.call(\n        self,\n        new Error.StripeConnectionError({\n          message: 'An error occurred with our connection to Stripe',\n          detail: error,\n        }),\n        null\n      );\n    }\n  },\n\n  _request: function(method, path, data, auth, options, callback) {\n    var self = this;\n    var requestData;\n\n    if (self.requestDataProcessor) {\n      requestData = self.requestDataProcessor(method, data, options.headers);\n    } else {\n      requestData = utils.stringifyRequestData(data || {});\n    }\n\n    var apiVersion = this._stripe.getApiField('version');\n\n    var headers = {\n      // Use specified auth token or use default from this stripe instance:\n      'Authorization': auth ?\n        'Basic ' + new Buffer(auth + ':').toString('base64') :\n        this._stripe.getApiField('auth'),\n      'Accept': 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Content-Length': requestData.length,\n      'User-Agent': 'Stripe/v1 NodeBindings/' + this._stripe.getConstant('PACKAGE_VERSION'),\n    };\n\n    if (apiVersion) {\n      headers['Stripe-Version'] = apiVersion;\n    }\n\n    // Grab client-user-agent before making the request:\n    this._stripe.getClientUserAgent(function(cua) {\n      headers['X-Stripe-Client-User-Agent'] = cua;\n\n      if (options.headers) {\n        objectAssign(headers, options.headers);\n      }\n\n      makeRequest();\n    });\n\n    function makeRequest() {\n      var timeout = self._stripe.getApiField('timeout');\n      var isInsecureConnection = self._stripe.getApiField('protocol') == 'http';\n\n      var host = self.overrideHost || self._stripe.getApiField('host');\n\n      var req = (\n        isInsecureConnection ? http : https\n      ).request({\n        host: host,\n        port: self._stripe.getApiField('port'),\n        path: path,\n        method: method,\n        agent: self._stripe.getApiField('agent'),\n        headers: headers,\n        ciphers: 'DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:!MD5',\n      });\n\n      req.setTimeout(timeout, self._timeoutHandler(timeout, req, callback));\n      req.on('response', self._responseHandler(req, callback));\n      req.on('error', self._errorHandler(req, callback));\n\n      req.on('socket', function(socket) {\n        socket.on((isInsecureConnection ? 'connect' : 'secureConnect'), function() {\n          // Send payload; we're safe:\n          req.write(requestData);\n          req.end();\n        });\n      });\n    }\n  },\n\n};\n\nmodule.exports = StripeResource;\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/utils.js":"'use strict';\n\nvar qs = require('qs');\n\nvar hasOwn = {}.hasOwnProperty;\nvar isPlainObject = require('lodash.isplainobject');\n\nvar utils = module.exports = {\n\n  isAuthKey: function(key) {\n    return typeof key == 'string' && /^(?:[a-z]{2}_)?[A-z0-9]{32}$/.test(key);\n  },\n\n  isOptionsHash: function(o) {\n    return isPlainObject(o) && ['api_key', 'idempotency_key', 'stripe_account'].some(function(key) {\n      return o.hasOwnProperty(key);\n    });\n  },\n\n  /**\n   * Stringifies an Object, accommodating nested objects\n   * (forming the conventional key 'parent[child]=value')\n   */\n  stringifyRequestData: function(data) {\n    return qs.stringify(data, {arrayFormat: 'brackets'});\n  },\n\n  /**\n   * Outputs a new function with interpolated object property values.\n   * Use like so:\n   *   var fn = makeURLInterpolator('some/url/{param1}/{param2}');\n   *   fn({ param1: 123, param2: 456 }); // => 'some/url/123/456'\n   */\n  makeURLInterpolator: (function() {\n    var rc = {\n      '\\n': '\\\\n', '\\\"': '\\\\\\\"',\n      '\\u2028': '\\\\u2028', '\\u2029': '\\\\u2029',\n    };\n    return function makeURLInterpolator(str) {\n      var cleanString = str.replace(/[\"\\n\\r\\u2028\\u2029]/g, function($0) {\n        return rc[$0];\n      });\n      return function(outputs) {\n        return cleanString.replace(/\\{([\\s\\S]+?)\\}/g, function($0, $1) {\n          return encodeURIComponent(outputs[$1] || '');\n        });\n      };\n    };\n  }()),\n\n  /**\n   * Return the data argument from a list of arguments\n   */\n  getDataFromArgs: function(args) {\n    if (args.length > 0) {\n      if (isPlainObject(args[0]) && !utils.isOptionsHash(args[0])) {\n        return args.shift();\n      }\n    }\n    return {};\n  },\n\n  /**\n   * Return the options hash from a list of arguments\n   */\n  getOptionsFromArgs: function(args) {\n    var opts = {\n      auth: null,\n      headers: {},\n    }\n    if (args.length > 0) {\n      var arg = args[args.length - 1];\n      if (utils.isAuthKey(arg)) {\n        opts.auth = args.pop();\n      } else if (utils.isOptionsHash(arg)) {\n        var params = args.pop();\n        if (params.api_key) {\n          opts.auth = params.api_key;\n        }\n        if (params.idempotency_key) {\n          opts.headers['Idempotency-Key'] = params.idempotency_key;\n        }\n        if (params.stripe_account) {\n          opts.headers['Stripe-Account'] = params.stripe_account;\n        }\n      }\n    }\n    return opts;\n  },\n\n  /**\n   * Provide simple \"Class\" extension mechanism\n   */\n  protoExtend: function(sub) {\n    var Super = this;\n    var Constructor = hasOwn.call(sub, 'constructor') ? sub.constructor : function() {\n      Super.apply(this, arguments);\n    };\n    Constructor.prototype = Object.create(Super.prototype);\n    for (var i in sub) {\n      if (hasOwn.call(sub, i)) {\n        Constructor.prototype[i] = sub[i];\n      }\n    }\n    for (i in Super) {\n      if (hasOwn.call(Super, i)) {\n        Constructor[i] = Super[i];\n      }\n    }\n    return Constructor;\n  },\n\n  /**\n   * Convert an array into an object with integer string attributes\n   */\n  arrayToObject: function(arr) {\n    if (Array.isArray(arr)) {\n      var obj = {};\n      arr.map(function(item, i) {\n        obj[i.toString()] = item;\n      });\n      return obj;\n    }\n    return arr;\n  },\n\n};\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/Error.js":"'use strict';\n\nvar utils = require('./utils');\n\nmodule.exports = _Error;\n\n/**\n * Generic Error klass to wrap any errors returned by stripe-node\n */\nfunction _Error(raw) {\n  this.populate.apply(this, arguments);\n  this.stack = (new Error(this.message)).stack;\n}\n\n// Extend Native Error\n_Error.prototype = Object.create(Error.prototype);\n\n_Error.prototype.type = 'GenericError';\n_Error.prototype.populate = function(type, message) {\n  this.type = type;\n  this.message = message;\n};\n\n_Error.extend = utils.protoExtend;\n\n/**\n * Create subclass of internal Error klass\n * (Specifically for errors returned from Stripe's REST API)\n */\nvar StripeError = _Error.StripeError = _Error.extend({\n  type: 'StripeError',\n  populate: function(raw) {\n    // Move from prototype def (so it appears in stringified obj)\n    this.type = this.type;\n\n    this.stack = (new Error(raw.message)).stack;\n    this.rawType = raw.type;\n    this.code = raw.code;\n    this.param = raw.param;\n    this.message = raw.message;\n    this.detail = raw.detail;\n    this.raw = raw;\n    this.requestId = raw.requestId;\n    this.statusCode = raw.statusCode;\n  },\n});\n\n/**\n * Helper factory which takes raw stripe errors and outputs wrapping instances\n */\nStripeError.generate = function(rawStripeError) {\n  switch (rawStripeError.type) {\n    case 'card_error':\n      return new _Error.StripeCardError(rawStripeError);\n    case 'invalid_request_error':\n      return new _Error.StripeInvalidRequestError(rawStripeError);\n    case 'api_error':\n      return new _Error.StripeAPIError(rawStripeError);\n  }\n  return new _Error('Generic', 'Unknown Error');\n};\n\n// Specific Stripe Error types:\n_Error.StripeCardError = StripeError.extend({type: 'StripeCardError'});\n_Error.StripeInvalidRequestError = StripeError.extend({type: 'StripeInvalidRequestError'});\n_Error.StripeAPIError = StripeError.extend({type: 'StripeAPIError'});\n_Error.StripeAuthenticationError = StripeError.extend({type: 'StripeAuthenticationError'});\n_Error.StripePermissionError = StripeError.extend({type: 'StripePermissionError'});\n_Error.StripeRateLimitError = StripeError.extend({type: 'StripeRateLimitError'});\n_Error.StripeConnectionError = StripeError.extend({type: 'StripeConnectionError'});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/StripeMethod.js":"'use strict';\n\nvar objectAssign = require('object-assign');\nvar path = require('path');\nvar Promise = require('bluebird');\nvar utils = require('./utils');\nvar OPTIONAL_REGEX = /^optional!/;\n\n/**\n * Create an API method from the declared spec.\n *\n * @param [spec.method='GET'] Request Method (POST, GET, DELETE, PUT)\n * @param [spec.path=''] Path to be appended to the API BASE_PATH, joined with\n *  the instance's path (e.g. 'charges' or 'customers')\n * @param [spec.required=[]] Array of required arguments in the order that they\n *  must be passed by the consumer of the API. Subsequent optional arguments are\n *  optionally passed through a hash (Object) as the penultimate argument\n *  (preceding the also-optional callback argument\n  * @param [spec.encode] Function for mutating input parameters to a method.\n *  Usefully for applying transforms to data on a per-method basis.\n */\nfunction stripeMethod(spec) {\n  var commandPath = typeof spec.path == 'function' ? spec.path\n                  : utils.makeURLInterpolator(spec.path || '');\n  var requestMethod = (spec.method || 'GET').toUpperCase();\n  var urlParams = spec.urlParams || [];\n  var encode = spec.encode || function(data) {return data;};\n\n  return function() {\n    var self = this;\n    var args = [].slice.call(arguments);\n\n    var callback = typeof args[args.length - 1] == 'function' && args.pop();\n    var urlData = this.createUrlData();\n\n    return this.wrapTimeout(new Promise((function(resolve, reject) {\n      for (var i = 0, l = urlParams.length; i < l; ++i) {\n        // Note that we shift the args array after every iteration so this just\n        // grabs the \"next\" argument for use as a URL parameter.\n        var arg = args[0];\n\n        var param = urlParams[i];\n\n        var isOptional = OPTIONAL_REGEX.test(param);\n        param = param.replace(OPTIONAL_REGEX, '');\n\n        if (!arg) {\n          if (isOptional) {\n            urlData[param] = '';\n            continue;\n          }\n\n          var path = this.createResourcePathWithSymbols(spec.path);\n          var err = new Error(\n            'Stripe: Argument \"' + urlParams[i] + '\" required, but got: ' + arg +\n            ' (on API request to `' + requestMethod + ' ' + path + '`)'\n          );\n          reject(err);\n          return;\n        }\n\n        urlData[param] = args.shift();\n      }\n\n      var data = encode(utils.getDataFromArgs(args));\n      var opts = utils.getOptionsFromArgs(args);\n\n      if (args.length) {\n        var path = this.createResourcePathWithSymbols(spec.path);\n        var err = new Error(\n          'Stripe: Unknown arguments (' + args + '). Did you mean to pass an options ' +\n          'object? See https://github.com/stripe/stripe-node/wiki/Passing-Options.' +\n          ' (on API request to ' + requestMethod + ' `' + path + '`)'\n        );\n        reject(err);\n        return;\n      }\n\n      var requestPath = this.createFullPath(commandPath, urlData);\n      function requestCallback(err, response) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(\n            spec.transformResponseData ?\n              spec.transformResponseData(response) :\n              response\n          );\n        }\n      };\n\n      var options = {headers: objectAssign(opts.headers, spec.headers)};\n      self._request(requestMethod, requestPath, data, opts.auth, options, requestCallback);\n    }).bind(this)), callback);\n  };\n};\n\nmodule.exports = stripeMethod;\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/StripeMethod.basic.js":"'use strict';\n\nvar Promise = require('bluebird');\nvar isPlainObject = require('lodash.isplainobject');\nvar stripeMethod = require('./StripeMethod');\nvar utils = require('./utils');\n\nmodule.exports = {\n\n  create: stripeMethod({\n    method: 'POST',\n  }),\n\n  list: stripeMethod({\n    method: 'GET',\n  }),\n\n  retrieve: stripeMethod({\n    method: 'GET',\n    path: '/{id}',\n    urlParams: ['id'],\n  }),\n\n  update: stripeMethod({\n    method: 'POST',\n    path: '{id}',\n    urlParams: ['id'],\n  }),\n\n  // Avoid 'delete' keyword in JS\n  del: stripeMethod({\n    method: 'DELETE',\n    path: '{id}',\n    urlParams: ['id'],\n  }),\n\n  setMetadata: function(id, key, value, auth, cb) {\n    var self = this;\n    var data = key;\n    var isObject = isPlainObject(key);\n    // We assume null for an empty object\n    var isNull = data === null || (isObject && !Object.keys(data).length);\n\n    // Allow optional passing of auth & cb:\n    if ((isNull || isObject) && typeof value == 'string') {\n      auth = value;\n    } else if (typeof auth != 'string') {\n      if (!cb && typeof auth == 'function') {\n        cb = auth;\n      }\n      auth = null;\n    }\n\n    var urlData = this.createUrlData();\n    var path = this.createFullPath('/' + id, urlData);\n\n    return this.wrapTimeout(new Promise((function(resolve, reject) {\n      if (isNull) {\n        // Reset metadata:\n        sendMetadata(null, auth);\n      } else if (!isObject) {\n        // Set individual metadata property:\n        var metadata = {};\n        metadata[key] = value;\n        sendMetadata(metadata, auth);\n      } else {\n        // Set entire metadata object after resetting it:\n        this._request('POST', path, {\n          metadata: null,\n        }, auth, {}, function(err, response) {\n          if (err) {\n            return reject(err);\n          }\n          sendMetadata(data, auth);\n        });\n      }\n\n      function sendMetadata(metadata, auth) {\n        self._request('POST', path, {\n          metadata: metadata,\n        }, auth, {}, function(err, response) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(response.metadata);\n          }\n        });\n      }\n    }).bind(this)), cb);\n  },\n\n  getMetadata: function(id, auth, cb) {\n    if (!cb && typeof auth == 'function') {\n      cb = auth;\n      auth = null;\n    }\n\n    var urlData = this.createUrlData();\n    var path = this.createFullPath('/' + id, urlData);\n\n    return this.wrapTimeout(new Promise((function(resolve, reject) {\n      this._request('GET', path, {}, auth, {}, function(err, response) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(response.metadata);\n        }\n      });\n    }).bind(this)), cb);\n  },\n\n};\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/ApplePayDomains.js":"'use strict';\n\nmodule.exports = require('../StripeResource').extend({\n  path: 'apple_pay/domains',\n  includeBasic: ['create', 'list', 'retrieve', 'del'],\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Balance.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\n\nmodule.exports = StripeResource.extend({\n\n  path: 'balance',\n\n  retrieve: stripeMethod({\n    method: 'GET',\n  }),\n\n  listTransactions: stripeMethod({\n    method: 'GET',\n    path: 'history',\n  }),\n\n  retrieveTransaction: stripeMethod({\n    method: 'GET',\n    path: 'history/{transactionId}',\n    urlParams: ['transactionId'],\n  }),\n\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Charges.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\n\nmodule.exports = StripeResource.extend({\n\n  path: 'charges',\n\n  includeBasic: [\n    'create', 'list', 'retrieve', 'update',\n    'setMetadata', 'getMetadata',\n  ],\n\n  capture: stripeMethod({\n    method: 'POST',\n    path: '/{id}/capture',\n    urlParams: ['id'],\n  }),\n\n  refund: stripeMethod({\n    method: 'POST',\n    path: '/{id}/refund',\n    urlParams: ['id'],\n  }),\n\n  updateDispute: stripeMethod({\n    method: 'POST',\n    path: '/{id}/dispute',\n    urlParams: ['id'],\n  }),\n\n  closeDispute: stripeMethod({\n    method: 'POST',\n    path: '/{id}/dispute/close',\n    urlParams: ['id'],\n  }),\n\n  /**\n   * Charge: Refund methods\n   * (Deprecated)\n   */\n  createRefund: stripeMethod({\n    method: 'POST',\n    path: '/{chargeId}/refunds',\n    urlParams: ['chargeId'],\n  }),\n\n  listRefunds: stripeMethod({\n    method: 'GET',\n    path: '/{chargeId}/refunds',\n    urlParams: ['chargeId'],\n  }),\n\n  retrieveRefund: stripeMethod({\n    method: 'GET',\n    path: '/{chargeId}/refunds/{refundId}',\n    urlParams: ['chargeId', 'refundId'],\n  }),\n\n  updateRefund: stripeMethod({\n    method: 'POST',\n    path: '/{chargeId}/refunds/{refundId}',\n    urlParams: ['chargeId', 'refundId'],\n  }),\n\n  markAsSafe: function(chargeId) {\n    return this.update(chargeId, {'fraud_details': {'user_report': 'safe'}})\n  },\n\n  markAsFraudulent: function(chargeId) {\n    return this.update(chargeId, {'fraud_details': {'user_report': 'fraudulent'}})\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/CountrySpecs.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\n\nmodule.exports = StripeResource.extend({\n\n  path: 'country_specs',\n\n  includeBasic: [\n    'list', 'retrieve',\n  ],\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Coupons.js":"'use strict';\n\nmodule.exports = require('../StripeResource').extend({\n  path: 'coupons',\n  includeBasic: ['create', 'list', 'update', 'retrieve', 'del'],\n});\n\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Customers.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar utils = require('../utils');\nvar stripeMethod = StripeResource.method;\n\nmodule.exports = StripeResource.extend({\n\n  path: 'customers',\n  includeBasic: [\n    'create', 'list', 'retrieve', 'update', 'del',\n    'setMetadata', 'getMetadata',\n  ],\n\n  /**\n   * Customer: Subscription methods\n   */\n\n  _legacyUpdateSubscription: stripeMethod({\n    method: 'POST',\n    path: '{customerId}/subscription',\n    urlParams: ['customerId'],\n  }),\n\n  _newstyleUpdateSubscription: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/subscriptions/{subscriptionId}',\n    urlParams: ['customerId', 'subscriptionId'],\n  }),\n\n  _legacyCancelSubscription: stripeMethod({\n    method: 'DELETE',\n    path: '{customerId}/subscription',\n    urlParams: ['customerId'],\n  }),\n\n  _newstyleCancelSubscription: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/subscriptions/{subscriptionId}',\n    urlParams: ['customerId', 'subscriptionId'],\n  }),\n\n  createSubscription: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/subscriptions',\n    urlParams: ['customerId'],\n  }),\n\n  listSubscriptions: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/subscriptions',\n    urlParams: ['customerId'],\n  }),\n\n  retrieveSubscription: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/subscriptions/{subscriptionId}',\n    urlParams: ['customerId', 'subscriptionId'],\n  }),\n\n  updateSubscription: function(customerId, subscriptionId) {\n    if (typeof subscriptionId == 'string') {\n      return this._newstyleUpdateSubscription.apply(this, arguments);\n    } else {\n      return this._legacyUpdateSubscription.apply(this, arguments);\n    }\n  },\n\n  cancelSubscription: function(customerId, subscriptionId) {\n    // This is a hack, but it lets us maximize our overloading.\n    // Precarious assumption: If it's not an auth key it _could_ be a sub id:\n    if (typeof subscriptionId == 'string' && !utils.isAuthKey(subscriptionId)) {\n      return this._newstyleCancelSubscription.apply(this, arguments);\n    } else {\n      return this._legacyCancelSubscription.apply(this, arguments);\n    }\n  },\n\n  /**\n   * Customer: Card methods\n   */\n\n  createCard: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/cards',\n    urlParams: ['customerId'],\n  }),\n\n  listCards: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/cards',\n    urlParams: ['customerId'],\n  }),\n\n  retrieveCard: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/cards/{cardId}',\n    urlParams: ['customerId', 'cardId'],\n  }),\n\n  updateCard: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/cards/{cardId}',\n    urlParams: ['customerId', 'cardId'],\n  }),\n\n  deleteCard: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/cards/{cardId}',\n    urlParams: ['customerId', 'cardId'],\n  }),\n\n  /**\n   * Customer: Source methods\n   */\n\n  createSource: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/sources',\n    urlParams: ['customerId'],\n  }),\n\n  listSources: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/sources',\n    urlParams: ['customerId'],\n  }),\n\n  retrieveSource: stripeMethod({\n    method: 'GET',\n    path: '/{customerId}/sources/{sourceId}',\n    urlParams: ['customerId', 'sourceId'],\n  }),\n\n  updateSource: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/sources/{sourceId}',\n    urlParams: ['customerId', 'sourceId'],\n  }),\n\n  deleteSource: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/sources/{sourceId}',\n    urlParams: ['customerId', 'sourceId'],\n  }),\n\n  verifySource: stripeMethod({\n    method: 'POST',\n    path: '/{customerId}/sources/{sourceId}/verify',\n    urlParams: ['customerId', 'sourceId'],\n  }),\n\n  /**\n   * Customer: Discount methods\n   */\n\n  deleteDiscount: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/discount',\n    urlParams: ['customerId'],\n  }),\n\n  deleteSubscriptionDiscount: stripeMethod({\n    method: 'DELETE',\n    path: '/{customerId}/subscriptions/{subscriptionId}/discount',\n    urlParams: ['customerId', 'subscriptionId'],\n  }),\n\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Disputes.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\n\nmodule.exports = StripeResource.extend({\n\n  path: 'disputes',\n\n  includeBasic: [\n    'list', 'retrieve', 'update', 'setMetadata', 'getMetadata',\n  ],\n\n  close: stripeMethod({\n    method: 'POST',\n    path: '/{id}/close',\n    urlParams: ['id'],\n  }),\n\n});\n\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Events.js":"'use strict';\n\nmodule.exports = require('../StripeResource').extend({\n  path: 'events',\n  includeBasic: ['list', 'retrieve'],\n});\n\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Invoices.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\nvar utils = require('../utils');\n\nmodule.exports = StripeResource.extend({\n\n  path: 'invoices',\n  includeBasic: ['create', 'list', 'retrieve', 'update'],\n\n  retrieveLines: stripeMethod({\n    method: 'GET',\n    path: '{invoiceId}/lines',\n    urlParams: ['invoiceId'],\n  }),\n\n  pay: stripeMethod({\n    method: 'POST',\n    path: '{invoiceId}/pay',\n    urlParams: ['invoiceId'],\n  }),\n\n  retrieveUpcoming: stripeMethod({\n    method: 'GET',\n    path: function(urlData) {\n      var url = 'upcoming?customer=' + urlData.customerId;\n      // Legacy support where second argument is a the subscription id\n      if (urlData.invoiceOptions && typeof urlData.invoiceOptions === 'string') {\n        return url + '&subscription=' + urlData.invoiceOptions;\n      } else if (urlData.invoiceOptions && typeof urlData.invoiceOptions === 'object') {\n        return url + '&' + utils.stringifyRequestData(urlData.invoiceOptions);\n      }\n      return url;\n    },\n    urlParams: ['customerId', 'optional!invoiceOptions'],\n  }),\n\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/InvoiceItems.js":"'use strict';\n\nmodule.exports = require('../StripeResource').extend({\n  path: 'invoiceitems',\n  includeBasic: [\n    'create', 'list', 'retrieve', 'update', 'del',\n    'setMetadata', 'getMetadata',\n  ],\n});\n\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Payouts.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\n\nmodule.exports = StripeResource.extend({\n\n  path: 'payouts',\n\n  includeBasic: [\n    'create', 'list', 'retrieve', 'update',\n    'setMetadata', 'getMetadata',\n  ],\n\n  cancel: stripeMethod({\n    method: 'POST',\n    path: '{payoutId}/cancel',\n    urlParams: ['payoutId'],\n  }),\n\n  listTransactions: stripeMethod({\n    method: 'GET',\n    path: '{payoutId}/transactions',\n    urlParams: ['payoutId'],\n  }),\n});\n\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Plans.js":"'use strict';\n\nmodule.exports = require('../StripeResource').extend({\n  path: 'plans',\n  includeBasic: ['create', 'list', 'retrieve', 'update', 'del'],\n});\n\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/RecipientCards.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\n\n/**\n * RecipientCard is similar to CustomerCard in that, upon instantiation, it\n * requires a recipientId, and therefore each of its methods only\n * require the cardId argument.\n *\n * This streamlines the API specifically for the case of accessing cards\n * on a returned recipient object.\n *\n * E.g. recipientObject.cards.retrieve(cardId)\n * (As opposed to the also-supported stripe.recipients.retrieveCard(recipientId, cardId))\n */\nmodule.exports = StripeResource.extend({\n  path: 'recipients/{recipientId}/cards',\n  includeBasic: ['create', 'list', 'retrieve', 'update', 'del'],\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Recipients.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\n\nmodule.exports = StripeResource.extend({\n\n  path: 'recipients',\n  includeBasic: [\n    'create', 'list', 'retrieve', 'update', 'del',\n    'setMetadata', 'getMetadata',\n  ],\n\n  createCard: stripeMethod({\n    method: 'POST',\n    path: '/{recipientId}/cards',\n    urlParams: ['recipientId'],\n  }),\n\n  listCards: stripeMethod({\n    method: 'GET',\n    path: '/{recipientId}/cards',\n    urlParams: ['recipientId'],\n  }),\n\n  retrieveCard: stripeMethod({\n    method: 'GET',\n    path: '/{recipientId}/cards/{cardId}',\n    urlParams: ['recipientId', 'cardId'],\n  }),\n\n  updateCard: stripeMethod({\n    method: 'POST',\n    path: '/{recipientId}/cards/{cardId}',\n    urlParams: ['recipientId', 'cardId'],\n  }),\n\n  deleteCard: stripeMethod({\n    method: 'DELETE',\n    path: '/{recipientId}/cards/{cardId}',\n    urlParams: ['recipientId', 'cardId'],\n  }),\n\n});\n\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Refunds.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\n\nmodule.exports = StripeResource.extend({\n\n  path: 'refunds',\n\n  includeBasic: [\n    'create', 'list', 'retrieve', 'update',\n  ],\n});\n\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Tokens.js":"'use strict';\n\nmodule.exports = require('../StripeResource').extend({\n  path: 'tokens',\n  includeBasic: ['create', 'retrieve'],\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Transfers.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\n\nmodule.exports = StripeResource.extend({\n\n  path: 'transfers',\n\n  includeBasic: [\n    'create', 'list', 'retrieve', 'update',\n    'setMetadata', 'getMetadata',\n  ],\n\n  reverse: stripeMethod({\n    method: 'POST',\n    path: '/{transferId}/reversals',\n    urlParams: ['transferId'],\n  }),\n\n  cancel: stripeMethod({\n    method: 'POST',\n    path: '{transferId}/cancel',\n    urlParams: ['transferId'],\n  }),\n\n  listTransactions: stripeMethod({\n    method: 'GET',\n    path: '{transferId}/transactions',\n    urlParams: ['transferId'],\n  }),\n\n  /**\n   * Transfer: Reversal methods\n   */\n  createReversal: stripeMethod({\n    method: 'POST',\n    path: '/{transferId}/reversals',\n    urlParams: ['transferId'],\n  }),\n\n  listReversals: stripeMethod({\n    method: 'GET',\n    path: '/{transferId}/reversals',\n    urlParams: ['transferId'],\n  }),\n\n  retrieveReversal: stripeMethod({\n    method: 'GET',\n    path: '/{transferId}/reversals/{reversalId}',\n    urlParams: ['transferId', 'reversalId'],\n  }),\n\n  updateReversal: stripeMethod({\n    method: 'POST',\n    path: '/{transferId}/reversals/{reversalId}',\n    urlParams: ['transferId', 'reversalId'],\n  }),\n});\n\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/ApplicationFees.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\n\nmodule.exports = StripeResource.extend({\n\n  path: 'application_fees',\n\n  includeBasic: [\n    'list', 'retrieve',\n  ],\n\n  refund: stripeMethod({\n    method: 'POST',\n    path: '/{id}/refund',\n    urlParams: ['id'],\n  }),\n\n  createRefund: stripeMethod({\n    method: 'POST',\n    path: '/{feeId}/refunds',\n    urlParams: ['feeId'],\n  }),\n\n  listRefunds: stripeMethod({\n    method: 'GET',\n    path: '/{feeId}/refunds',\n    urlParams: ['feeId'],\n  }),\n\n  retrieveRefund: stripeMethod({\n    method: 'GET',\n    path: '/{feeId}/refunds/{refundId}',\n    urlParams: ['feeId', 'refundId'],\n  }),\n\n  updateRefund: stripeMethod({\n    method: 'POST',\n    path: '/{feeId}/refunds/{refundId}',\n    urlParams: ['feeId', 'refundId'],\n  }),\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/FileUploads.js":"'use strict';\n\nvar utils = require('../utils');\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\nvar multipartDataGenerator = require('../MultipartDataGenerator');\n\nmodule.exports = StripeResource.extend({\n\n  overrideHost: 'uploads.stripe.com',\n\n  requestDataProcessor: function(method, data, headers) {\n    data = data || {};\n\n    if (method === 'POST') {\n      return multipartDataGenerator(method, data, headers);\n    } else {\n      return utils.stringifyRequestData(data);\n    }\n  },\n\n  path: 'files',\n\n  includeBasic: [\n    'retrieve',\n    'list',\n  ],\n\n  create: stripeMethod({\n    method: 'POST',\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  }),\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/MultipartDataGenerator.js":"'use strict';\n\n// Method for formatting HTTP body for the multipart/form-data specification\n// Mostly taken from Fermata.js\n// https://github.com/natevw/fermata/blob/5d9732a33d776ce925013a265935facd1626cc88/fermata.js#L315-L343\nfunction multipartDataGenerator(method, data, headers) {\n  var segno = (Math.round(Math.random() * 1e16) + Math.round(Math.random() * 1e16)).toString();\n  headers['Content-Type'] = ('multipart/form-data; boundary=' + segno);\n  var buffer = new Buffer(0);\n\n  function push(l) {\n    var prevBuffer = buffer;\n    var newBuffer = (l instanceof Buffer) ? l : new Buffer(l);\n    buffer = new Buffer(prevBuffer.length + newBuffer.length + 2);\n    prevBuffer.copy(buffer);\n    newBuffer.copy(buffer, prevBuffer.length);\n    buffer.write('\\r\\n', buffer.length - 2);\n  }\n\n  function q(s) {\n    return '\"' + s.replace(/\"|\"/g, '%22').replace(/\\r\\n|\\r|\\n/g, ' ') + '\"';\n  }\n\n  for (var k in data) {\n    var v = data[k];\n    push('--' + segno);\n    if (v.hasOwnProperty('data')) {\n      push('Content-Disposition: form-data; name=' + q(k) + '; filename=' + q(v.name || 'blob'));\n      push('Content-Type: ' + (v.type || 'application/octet-stream'));\n      push('');\n      push(v.data);\n    } else {\n      push('Content-Disposition: form-data; name=' + q(k));\n      push('');\n      push(v);\n    }\n  };\n  push('--' + segno + '--');\n\n  return buffer;\n};\n\nmodule.exports = multipartDataGenerator;\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/BitcoinReceivers.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\n\nmodule.exports = StripeResource.extend({\n\n  path: 'bitcoin/receivers',\n\n  includeBasic: [\n    'create', 'list', 'retrieve',\n    'update', 'setMetadata', 'getMetadata',\n  ],\n\n  listTransactions: stripeMethod({\n    method: 'GET',\n    path: '/{receiverId}/transactions',\n    urlParams: ['receiverId'],\n  }),\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Products.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\nvar utils = require('../utils');\n\nmodule.exports = StripeResource.extend({\n\n  path: 'products',\n\n  includeBasic: [\n    'list', 'retrieve', 'update', 'del',\n  ],\n\n  create: stripeMethod({\n    method: 'POST',\n    required: ['name'],\n  }),\n\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/SKUs.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\nvar utils = require('../utils');\n\nmodule.exports = StripeResource.extend({\n\n  path: 'skus',\n\n  includeBasic: [\n    'list', 'retrieve', 'update', 'del',\n  ],\n\n  create: stripeMethod({\n    method: 'POST',\n    required: ['currency', 'inventory', 'price', 'product'],\n  }),\n\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Orders.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\nvar utils = require('../utils');\n\nmodule.exports = StripeResource.extend({\n\n  path: 'orders',\n\n  includeBasic: [\n    'list', 'retrieve', 'update',\n  ],\n\n  create: stripeMethod({\n    method: 'POST',\n    required: ['currency'],\n  }),\n\n  pay: stripeMethod({\n    method: 'POST',\n    path: '/{orderId}/pay',\n    urlParams: ['orderId'],\n  }),\n\n  returnOrder: stripeMethod({\n    method: 'POST',\n    path: '/{orderId}/returns',\n    urlParams: ['orderId'],\n  }),\n\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/OrderReturns.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\nvar utils = require('../utils');\n\nmodule.exports = StripeResource.extend({\n\n  path: 'order_returns',\n\n  includeBasic: [\n    'list', 'retrieve',\n  ],\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Subscriptions.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar utils = require('../utils');\nvar stripeMethod = StripeResource.method;\n\nfunction encode(data) {\n  if (data.items !== undefined) {\n    data.items = utils.arrayToObject(data.items);\n  }\n  return data;\n}\n\nmodule.exports = StripeResource.extend({\n\n  path: 'subscriptions',\n  includeBasic: ['list', 'retrieve', 'del',],\n\n  create: stripeMethod({\n    method: 'POST',\n    encode: encode,\n  }),\n\n  update: stripeMethod({\n    method: 'POST',\n    path: '{id}',\n    urlParams: ['id'],\n    encode: encode,\n  }),\n\n  /**\n   * Subscription: Discount methods\n   */\n  deleteDiscount: stripeMethod({\n    method: 'DELETE',\n    path: '/{subscriptionId}/discount',\n    urlParams: ['subscriptionId'],\n  }),\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/SubscriptionItems.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\n\nmodule.exports = StripeResource.extend({\n  path: 'subscription_items',\n  includeBasic: ['create', 'list', 'retrieve', 'update', 'del',],\n});\n\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/ThreeDSecure.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\n\nmodule.exports = StripeResource.extend({\n\n  path: '3d_secure',\n\n  includeBasic: [\n    'create',\n    'retrieve',\n  ],\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/Sources.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\n\nmodule.exports = StripeResource.extend({\n\n  path: 'sources',\n\n  includeBasic: [\n    'create', 'retrieve', 'update', 'setMetadata', 'getMetadata',\n  ],\n\n  verify: stripeMethod({\n    method: 'POST',\n    path: '/{id}/verify',\n    urlParams: ['id'],\n  }),\n\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/CustomerCards.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\n\n/**\n * CustomerCard is a unique resource in that, upon instantiation,\n * requires a customerId, and therefore each of its methods only\n * require the cardId argument.\n *\n * This streamlines the API specifically for the case of accessing cards\n * on a returned customer object.\n *\n * E.g. customerObject.cards.retrieve(cardId)\n * (As opposed to the also-supported stripe.customers.retrieveCard(custId, cardId))\n */\nmodule.exports = StripeResource.extend({\n  path: 'customers/{customerId}/cards',\n  includeBasic: ['create', 'list', 'retrieve', 'update', 'del'],\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/CustomerSubscriptions.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\nvar stripeMethod = StripeResource.method;\n\n/**\n * CustomerSubscription is a unique resource in that, upon instantiation,\n * requires a customerId, and therefore each of its methods only\n * require the subscriptionId argument.\n *\n * This streamlines the API specifically for the case of accessing cards\n * on a returned customer object.\n *\n * E.g. customerObject.cards.retrieve(cardId)\n * (As opposed to the also-supported stripe.customers.retrieveCard(custId, cardId))\n */\nmodule.exports = StripeResource.extend({\n  path: 'customers/{customerId}/subscriptions',\n  includeBasic: ['create', 'list', 'retrieve', 'update', 'del'],\n\n  /**\n   * Customer: Discount methods\n   */\n\n  deleteDiscount: stripeMethod({\n    method: 'DELETE',\n    path: '/{subscriptionId}/discount',\n    urlParams: ['customerId', 'subscriptionId'],\n  }),\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/ChargeRefunds.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\n\n/**\n * ChargeRefunds is a unique resource in that, upon instantiation,\n * requires a chargeId, and therefore each of its methods only\n * require the refundId argument.\n *\n * This streamlines the API specifically for the case of accessing refunds\n * on a returned charge object.\n *\n * E.g. chargeObject.refunds.retrieve(refundId)\n * (As opposed to the also-supported stripe.charges.retrieveRefund(chargeId,\n * refundId))\n */\nmodule.exports = StripeResource.extend({\n  path: 'charges/{chargeId}/refunds',\n  includeBasic: ['create', 'list', 'retrieve', 'update'],\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/ApplicationFeeRefunds.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\n\n/**\n * ApplicationFeeRefunds is a unique resource in that, upon instantiation,\n * requires an application fee id , and therefore each of its methods only\n * require the refundId argument.\n *\n * This streamlines the API specifically for the case of accessing refunds\n * on a returned application fee object.\n *\n * E.g. applicationFeeObject.refunds.retrieve(refundId)\n * (As opposed to the also-supported stripe.applicationFees.retrieveRefund(chargeId,\n * refundId))\n */\nmodule.exports = StripeResource.extend({\n  path: 'application_fees/{feeId}/refunds',\n  includeBasic: ['create', 'list', 'retrieve', 'update'],\n});\n","/home/travis/build/npmtest/node-npmtest-stripe/stripe/lib/resources/TransferReversals.js":"'use strict';\n\nvar StripeResource = require('../StripeResource');\n\n/**\n * TransferReversals is a unique resource in that, upon instantiation,\n * requires a transferId, and therefore each of its methods only\n * require the reversalId argument.\n *\n * This streamlines the API specifically for the case of accessing reversals\n * on a returned transfer object.\n *\n * E.g. transferObject.reversals.retrieve(reversalId)\n * (As opposed to the also-supported stripe.transfers.retrieveReversal(transferId,\n * reversalId))\n */\nmodule.exports = StripeResource.extend({\n  path: 'transfers/{transferId}/reversals',\n  includeBasic: ['create', 'list', 'retrieve', 'update'],\n});\n\n"}